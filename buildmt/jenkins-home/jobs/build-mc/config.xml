<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build the MC executables</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -e 

# prepare mcmc and docgen for build
echo &quot;Preparing mcmc and docgen templates...&quot;
rm -f $GIT_WS/mc/mcmc/arlan/template_engine
make -C $GIT_WS/mc/mcmc/arlan -f makefile.template
mkdir -p $GIT_WS/mc/model/escher/src/c
bash -c &quot;cd $GIT_WS/mc/mcmc/arlan; bash convert_templates.sh&quot;
cp -r $GIT_WS/mc/model/document/gen/docbook_h $GIT_WS/mc/model/docgen/src/docbook

# launch an eclipse instance
echo &quot;Launching an Eclipse command line instance...&quot;
$BPHOME/tools/mc/bin/CLI.sh Launch -workspacePreferences &quot;bridgepoint_prefs_allow_operations_in_where=true&quot;

# import the projects
echo &quot;Importing projects...&quot;
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/bridgepoint/src/org.xtuml.bp.ui.marking/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/mcooa/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/mcshared/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/document/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/docgen/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/escher/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/integrity/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/masl/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/maslin/
$BPHOME/tools/mc/bin/CLI.sh Import -project $GIT_WS/mc/model/maslout/

# build the projects
echo &quot;Building projects...&quot;
$BPHOME/tools/mc/bin/CLI.sh Build -project docgen
#$BPHOME/tools/mc/bin/CLI.sh Build -project escher
$BPHOME/tools/mc/bin/CLI.sh Build -project integrity
$BPHOME/tools/mc/bin/CLI.sh Build -project masl
$BPHOME/tools/mc/bin/CLI.sh Build -project maslin
$BPHOME/tools/mc/bin/CLI.sh Build -project maslout

# shutdown eclipse instance
$BPHOME/tools/mc/bin/CLI.sh Launch -exit

# archive the source
echo &quot;Archiving the source...&quot;
mkdir -p src
cp -r $WORKSPACE2/docgen src/docgen-src
#cp -r $WORKSPACE2/escher src/mcmc-src
cp -r $WORKSPACE2/integrity src/integrity-src
cp -r $WORKSPACE2/masl src/masl-src
cp -r $WORKSPACE2/maslin src/maslin-src
cp -r $WORKSPACE2/maslout src/maslout-src
zip -qr mcsrc.zip src/

# build the MASL parser
echo &quot;Building the MASL parser...&quot;
wget -O $GIT_WS/mc/masl/parser/lib/antlr-3.5.2-complete.jar http://www.antlr3.org/download/antlr-3.5.2-complete.jar
bash -c &quot;cd $GIT_WS/mc/masl/parser; ant dist&quot;

# make the output directory
mkdir -p $OUT_DIR

# copy the archived source
cp mcsrc.zip $OUT_DIR

# copy the MASL parser
cp $GIT_WS/mc/masl/parser/dist/lib/*.jar $OUT_DIR

# compile the projects
echo &quot;Compiling projects...&quot;

export PATH=$PATH:$OSXCROSS_TARGET/bin

cd $WORKSPACE2/docgen/src
make -f makefile.docgen EXECUTABLE=docgen.linux; rm -f *.o
make -f makefile.docgen EXECUTABLE=docgen.mac CC=o64-clang; rm -f *.o
make -f makefile.docgen EXECUTABLE=docgen.win CC=x86_64-w64-mingw32-gcc CFLAGS=&quot;-Wno-pointer-to-int-cast -static&quot;; rm -f *.o

#cd $WORKSPACE/escher/src
#make -f makefile.mcmc EXECUTABLE=mcmc.linux; rm -f *.o
#make -f makefile.mcmc EXECUTABLE=mcmc.mac CC=o64-clang LFLAGS=-L$OSXCROSS_TARGET/SDK/*/usr/lib -ll

cd $WORKSPACE2/integrity/src
make -f makefile.integrity EXECUTABLE=integrity.linux; rm -f *.o
make -f makefile.integrity EXECUTABLE=integrity.mac CC=o64-clang; rm -f *.o
make -f makefile.integrity EXECUTABLE=integrity.win CC=x86_64-w64-mingw32-gcc CFLAGS=&quot;-Wno-pointer-to-int-cast -static -DWIN&quot;; rm -f *.o

cd $WORKSPACE2/masl/src
make -f makefile.masl EXECUTABLE=masl.linux; rm -f *.o
make -f makefile.masl EXECUTABLE=masl.mac CC=o64-clang; rm -f *.o
make -f makefile.masl EXECUTABLE=masl.win CC=x86_64-w64-mingw32-gcc CFLAGS=&quot;-Wno-pointer-to-int-cast -static -DWIN&quot;; rm -f *.o

cd $WORKSPACE2/maslin/src
make -f makefile.maslin EXECUTABLE=m2x.linux; rm -f *.o
make -f makefile.maslin EXECUTABLE=m2x.mac CC=o64-clang; rm -f *.o
make -f makefile.maslin EXECUTABLE=m2x.win CC=x86_64-w64-mingw32-gcc CFLAGS=&quot;-Wno-pointer-to-int-cast -static -DWIN&quot;; rm -f *.o

cd $WORKSPACE2/maslout/src
make -f makefile.maslout EXECUTABLE=x2m.linux; rm -f *.o
make -f makefile.maslout EXECUTABLE=x2m.mac CC=o64-clang; rm -f *.o
make -f makefile.maslout EXECUTABLE=x2m.win CC=x86_64-w64-mingw32-gcc CFLAGS=&quot;-Wno-pointer-to-int-cast -static -DWIN&quot;; rm -f *.o

# copy the executables
cp $WORKSPACE2/docgen/src/docgen.linux $OUT_DIR
cp $WORKSPACE2/docgen/src/docgen.mac $OUT_DIR
cp $WORKSPACE2/docgen/src/docgen.win $OUT_DIR
#cp $WORKSPACE2/escher/src/mcmc.* $OUT_DIR
cp $WORKSPACE2/integrity/src/integrity.linux $OUT_DIR
cp $WORKSPACE2/integrity/src/integrity.mac $OUT_DIR
cp $WORKSPACE2/integrity/src/integrity.win $OUT_DIR
cp $WORKSPACE2/masl/src/masl.linux $OUT_DIR
cp $WORKSPACE2/masl/src/masl.mac $OUT_DIR
cp $WORKSPACE2/masl/src/masl.win $OUT_DIR
cp $WORKSPACE2/maslin/src/m2x.* $OUT_DIR
cp $WORKSPACE2/maslout/src/x2m.* $OUT_DIR

# copy the executables into the mc repo
cp $OUT_DIR/MASLParser.jar $GIT_WS/mc/bin
cp $OUT_DIR/docgen.linux $GIT_WS/mc/bin/docgen
cp $OUT_DIR/integrity.linux $GIT_WS/mc/bin/integrity
cp $OUT_DIR/masl.linux $GIT_WS/mc/bin/masl
cp $OUT_DIR/m2x.linux $GIT_WS/mc/bin/m2x
cp $OUT_DIR/x2m.linux $GIT_WS/mc/bin/x2m
cp $OUT_DIR/docgen.mac $GIT_WS/mc/bin/mac/docgen
cp $OUT_DIR/integrity.mac $GIT_WS/mc/bin/mac/integrity
cp $OUT_DIR/masl.mac $GIT_WS/mc/bin/mac/masl
cp $OUT_DIR/m2x.mac $GIT_WS/mc/bin/mac/m2x
cp $OUT_DIR/x2m.mac $GIT_WS/mc/bin/mac/x2m
cp $OUT_DIR/docgen.win $GIT_WS/mc/bin/win/docgen.exe
cp $OUT_DIR/integrity.win $GIT_WS/mc/bin/win/integrity.exe
cp $OUT_DIR/masl.win $GIT_WS/mc/bin/win/masl.exe
cp $OUT_DIR/m2x.win $GIT_WS/mc/bin/win/m2x.exe
cp $OUT_DIR/x2m.win $GIT_WS/mc/bin/win/x2m.exe

echo &quot;Done.&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>bin/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <EnvInjectBuildWrapper plugin="envinject@2.1.6">
      <info>
        <propertiesContent>GIT_WS=$JENKINS_HOME/../git
BPHOME=$JENKINS_HOME/../BridgePoint
WORKSPACE2=$WORKSPACE
OUT_DIR=$WORKSPACE/bin
OSXCROSS_TARGET=$JENKINS_HOME/../osxcross/target
PATH=$PATH:$OSXCROSS_TARGET/bin</propertiesContent>
        <secureGroovyScript plugin="script-security@1.52">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <hudson.plugins.xvnc.Xvnc plugin="xvnc@1.24">
      <takeScreenshot>false</takeScreenshot>
      <useXauthority>true</useXauthority>
    </hudson.plugins.xvnc.Xvnc>
  </buildWrappers>
</project>